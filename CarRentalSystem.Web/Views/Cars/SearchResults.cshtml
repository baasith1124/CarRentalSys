@model CarRentalSystem.Web.ViewModels.Car.CarSearchResultViewModel

@section Styles {
    <link rel="stylesheet" href="~/css/3d-interactive-landing.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/modern-theme.css" asp-append-version="true" />
    
    <style>
        .booking-timeout-card {
            background: linear-gradient(135deg, #ff6b6b, #ff8e8e);
            border-radius: 15px;
            padding: 20px;
            color: white;
            text-align: center;
            box-shadow: 0 8px 25px rgba(255, 107, 107, 0.3);
            animation: pulse 2s infinite;
        }
        
        .timeout-header {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 10px;
            opacity: 0.9;
        }
        
        .timeout-timer {
            font-size: 32px;
            font-weight: bold;
            font-family: 'Courier New', monospace;
            margin: 10px 0;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        .timeout-minutes, .timeout-seconds {
            display: inline-block;
            min-width: 40px;
            text-align: center;
        }
        
        .timeout-separator {
            margin: 0 5px;
            animation: blink 1s infinite;
        }
        
        .timeout-message {
            font-size: 12px;
            opacity: 0.8;
            margin-top: 5px;
        }
        
        @@keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.02); }
            100% { transform: scale(1); }
        }
        
        @@keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0.3; }
        }
        
        .timeout-warning {
            background: linear-gradient(135deg, #ff4757, #ff6b7a) !important;
            animation: pulse 1s infinite !important;
        }
        
        .timeout-critical {
            background: linear-gradient(135deg, #ff3838, #ff4757) !important;
            animation: pulse 0.5s infinite !important;
        }
    </style>
}

<!-- Animated Background -->
<div class="animated-bg">
    <div class="floating-dots">
        @for (int i = 0; i < 15; i++)
        {
            <div class="dot" style="--delay: @(i * 0.5)s; --size: @(Random.Shared.Next(4, 12))px;"></div>
        }
    </div>
</div>

<div class="search-results-container">
    <!-- Hero Header Section -->
    <div class="search-hero-section">
        <div class="container-fluid">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h1 class="search-hero-title">Search Results</h1>
                    <p class="search-hero-subtitle">Found @Model.Cars.Count() premium vehicles for your journey</p>
                    <div class="search-meta">
                        <span class="meta-item">
                            <i class="bi bi-calendar"></i>
                            @Model.PickupDate.ToString("MMM dd") - @Model.DropDate.ToString("MMM dd, yyyy")
                        </span>
                        <span class="meta-item">
                            <i class="bi bi-geo-alt"></i>
                            @Model.PickupLocation @(Model.PickupLocation != Model.DropLocation ? " â†’ " + Model.DropLocation : "")
                        </span>
                    </div>
                </div>
                <div class="col-md-4 text-end">
                    <div class="search-stats-card">
                        <div class="stat-number">@Model.Cars.Count()</div>
                        <div class="stat-label">Available Cars</div>
                    </div>
                    
                    <!-- Booking Timeout Countdown -->
                    <div class="booking-timeout-card mt-3" id="bookingTimeoutCard" style="display: none;">
                        <div class="timeout-header">
                            <i class="bi bi-clock-history"></i>
                            <span>Booking Timeout</span>
                        </div>
                        <div class="timeout-timer" id="timeoutTimer">
                            <span class="timeout-minutes" id="timeoutMinutes">15</span>
                            <span class="timeout-separator">:</span>
                            <span class="timeout-seconds" id="timeoutSeconds">00</span>
                        </div>
                        <div class="timeout-message">
                            Complete your booking before time expires
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container-fluid py-5 px-4">
        <div class="row">
            <!-- Enhanced Filter Sidebar -->
            <div class="col-lg-3 mb-4">
                <div class="filter-sidebar-3d">
                    <div class="filter-header">
                        <h5 class="filter-title">
                            <i class="bi bi-funnel"></i>
                            Refine Your Search
                        </h5>
                    </div>
                    <form method="get" asp-action="Search" asp-controller="Cars" class="filter-form">
                        <!-- Hidden fields for location data -->
                        <input type="hidden" name="PickupLocation" value="@Model.PickupLocation" />
                        <input type="hidden" name="DropLocation" value="@Model.DropLocation" />
                        
                        <!-- Pickup and Drop Dates -->
                        <div class="filter-group">
                            <label class="filter-label">
                                <i class="bi bi-calendar-event"></i>
                                Pickup Date
                            </label>
                            <input type="datetime-local" name="PickupDate"
                                   class="form-control-3d"
                                   value="@Model.PickupDate.ToString("yyyy-MM-ddTHH:mm")"
                                   required />
                        </div>

                        <div class="filter-group">
                            <label class="filter-label">
                                <i class="bi bi-calendar-check"></i>
                                Drop Date
                            </label>
                            <input type="datetime-local" name="DropDate"
                                   class="form-control-3d"
                                   value="@Model.DropDate.ToString("yyyy-MM-ddTHH:mm")"
                                   required />
                        </div>

                        <!-- Brands -->
                        <div class="filter-group">
                            <label class="filter-label">
                                <i class="bi bi-car-front"></i>
                                Brand
                            </label>
                            <select name="Brand" class="form-select-3d">
                                <option value="">All Brands</option>
                                @foreach (var brand in Model.Brands)
                                {
                                    <option value="@brand" selected="@(Model.Brand == brand ? "selected" : null)">@brand</option>
                                }
                            </select>
                        </div>

                        <!-- Transmission -->
                        <div class="filter-group">
                            <label class="filter-label">
                                <i class="bi bi-gear"></i>
                                Transmission
                            </label>
                            <select name="Transmission" class="form-select-3d">
                                <option value="">All Types</option>
                                @foreach (var t in Model.Transmissions)
                                {
                                    <option value="@t" selected="@(Model.Transmission == t ? "selected" : null)">@t</option>
                                }
                            </select>
                        </div>

                        <!-- Fuel Type -->
                        <div class="filter-group">
                            <label class="filter-label">
                                <i class="bi bi-fuel-pump"></i>
                                Fuel Type
                            </label>
                            <select name="FuelType" class="form-select-3d">
                                <option value="">All Fuels</option>
                                @foreach (var f in Model.FuelTypes)
                                {
                                    <option value="@f" selected="@(Model.FuelType == f ? "selected" : null)">@f</option>
                                }
                            </select>
                        </div>

                        <!-- Year Range -->
                        <div class="filter-group">
                            <label class="filter-label">
                                <i class="bi bi-calendar-range"></i>
                                Year Range
                            </label>
                            <div class="year-range-inputs">
                                <input type="number" name="MinYear" class="form-control-3d" 
                                       placeholder="From" min="2000" value="@Model.MinYear" />
                                <input type="number" name="MaxYear" class="form-control-3d" 
                                       placeholder="To" max="@DateTime.Now.Year" value="@Model.MaxYear" />
                            </div>
                        </div>

                        <button type="submit" class="filter-apply-btn">
                            <i class="bi bi-search"></i>
                            Apply Filters
                        </button>
                    </form>
                </div>
            </div>

            <!-- Enhanced Car Grid -->
            <div class="col-lg-9">
                @if (!Model.Cars.Any())
                {
                    <div class="no-results-3d">
                        <div class="no-results-icon">
                            <i class="bi bi-search"></i>
                        </div>
                        <h3>No Cars Found</h3>
                        <p>Try adjusting your search filters to find more vehicles.</p>
                        <button onclick="clearFilters()" class="btn-clear-filters">
                            <i class="bi bi-arrow-clockwise"></i>
                            Clear Filters
                        </button>
                    </div>
                }
                else
                {
                    <div class="cars-grid-enhanced">
                        @foreach (var car in Model.Cars)
                        {
                            <partial name="_CarCardEnhancedPartial" model="car" />
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/3d-interactive-landing.js" asp-append-version="true"></script>
    <script>
        // showLoginModal function is now handled globally in login-modal.js
        
        function clearFilters() {
            const form = document.querySelector('.filter-form');
            const inputs = form.querySelectorAll('input[type="number"], select');
            inputs.forEach(input => {
                if (input.tagName === 'SELECT') {
                    input.selectedIndex = 0;
                } else if (input.type === 'number') {
                    input.value = '';
                }
            });
            form.submit();
        }
        
        // Enhanced filter interactions
        document.addEventListener('DOMContentLoaded', function() {
            const filterInputs = document.querySelectorAll('.form-control-3d, .form-select-3d');
            
            filterInputs.forEach(input => {
                input.addEventListener('focus', function() {
                    this.parentElement.classList.add('focused');
                });
                
                input.addEventListener('blur', function() {
                    this.parentElement.classList.remove('focused');
                });
            });
            
            // Add smooth scroll to results when filters are applied
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.toString()) {
                document.querySelector('.cars-grid-enhanced')?.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    </script>
    
    <script>
        // Booking Timeout Countdown Timer
        let bookingTimeoutInterval;
        let bookingStartTime;
        let isBookingInProgress = false;
        
        // Check if there's an active booking session
        function checkBookingSession() {
            const bookingStartTimeStr = sessionStorage.getItem('bookingStartTime');
            if (bookingStartTimeStr) {
                bookingStartTime = new Date(bookingStartTimeStr);
                const now = new Date();
                const elapsed = (now - bookingStartTime) / 1000; // seconds
                const remaining = (15 * 60) - elapsed; // 15 minutes in seconds
                
                if (remaining > 0) {
                    startCountdown(remaining);
                } else {
                    // Timeout expired, clear session
                    clearBookingSession();
                }
            }
        }
        
        // Start the countdown timer
        function startCountdown(totalSeconds) {
            isBookingInProgress = true;
            document.getElementById('bookingTimeoutCard').style.display = 'block';
            
            bookingTimeoutInterval = setInterval(() => {
                const minutes = Math.floor(totalSeconds / 60);
                const seconds = totalSeconds % 60;
                
                document.getElementById('timeoutMinutes').textContent = minutes.toString().padStart(2, '0');
                document.getElementById('timeoutSeconds').textContent = seconds.toString().padStart(2, '0');
                
                // Change styling based on remaining time
                const timeoutCard = document.getElementById('bookingTimeoutCard');
                if (totalSeconds <= 60) {
                    timeoutCard.className = 'booking-timeout-card mt-3 timeout-critical';
                } else if (totalSeconds <= 300) { // 5 minutes
                    timeoutCard.className = 'booking-timeout-card mt-3 timeout-warning';
                }
                
                if (totalSeconds <= 0) {
                    clearInterval(bookingTimeoutInterval);
                    handleBookingTimeout();
                }
                
                totalSeconds--;
            }, 1000);
        }
        
        // Handle booking timeout
        function handleBookingTimeout() {
            document.getElementById('bookingTimeoutCard').innerHTML = `
                <div class="timeout-header">
                    <i class="bi bi-exclamation-triangle"></i>
                    <span>Booking Expired</span>
                </div>
                <div class="timeout-timer">
                    <span style="font-size: 24px;">00:00</span>
                </div>
                <div class="timeout-message">
                    Your booking session has expired. Please search again.
                </div>
            `;
            
            // Show notification
            showNotification('Your booking session has expired. Please search again.', 'warning');
            
            // Clear session after 5 seconds
            setTimeout(() => {
                clearBookingSession();
                location.reload();
            }, 5000);
        }
        
        // Clear booking session
        function clearBookingSession() {
            sessionStorage.removeItem('bookingStartTime');
            isBookingInProgress = false;
            if (bookingTimeoutInterval) {
                clearInterval(bookingTimeoutInterval);
            }
            document.getElementById('bookingTimeoutCard').style.display = 'none';
        }
        
        // Start booking session (called when user clicks "Book Now")
        function startBookingSession() {
            if (!isBookingInProgress) {
                bookingStartTime = new Date();
                sessionStorage.setItem('bookingStartTime', bookingStartTime.toISOString());
                startCountdown(15 * 60); // 15 minutes
            }
        }
        
        // Show notification
        function showNotification(message, type = 'info') {
            // Create toast notification
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type === 'warning' ? 'warning' : 'info'} border-0`;
            toast.setAttribute('role', 'alert');
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            
            // Add to page
            let toastContainer = document.getElementById('toast-container');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toast-container';
                toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
                toastContainer.style.zIndex = '9999';
                document.body.appendChild(toastContainer);
            }
            
            toastContainer.appendChild(toast);
            
            // Show toast
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            
            // Remove from DOM after hiding
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            checkBookingSession();
            
            // Add click handlers to "Book Now" buttons
            document.querySelectorAll('.book-now-btn').forEach(button => {
                button.addEventListener('click', function(e) {
                    startBookingSession();
                });
            });
        });
        
        // Clear session when user navigates away
        window.addEventListener('beforeunload', function() {
            if (isBookingInProgress) {
                // Keep session for page refresh, but clear on navigation
                if (performance.navigation.type === 1) { // Page refresh
                    return;
                }
            }
        });
    </script>
}
