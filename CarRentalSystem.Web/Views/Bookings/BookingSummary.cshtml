@model CarRentalSystem.Web.ViewModels.Bookings.BookingSummaryViewModel

@{
    ViewData["Title"] = "Booking Summary";
}

@section Styles {
    <link rel="stylesheet" href="~/css/3d-interactive-landing.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/modern-theme.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/booking-summary.css" asp-append-version="true" />
    
    <style>
        .booking-timeout-card {
            background: linear-gradient(135deg, #ff6b6b, #ff8e8e);
            border-radius: 15px;
            padding: 20px;
            color: white;
            text-align: center;
            box-shadow: 0 8px 25px rgba(255, 107, 107, 0.3);
            animation: pulse 2s infinite;
            max-width: 300px;
            margin: 0 auto;
        }
        
        .timeout-header {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 10px;
            opacity: 0.9;
        }
        
        .timeout-timer {
            font-size: 32px;
            font-weight: bold;
            font-family: 'Courier New', monospace;
            margin: 10px 0;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        .timeout-minutes, .timeout-seconds {
            display: inline-block;
            min-width: 40px;
            text-align: center;
        }
        
        .timeout-separator {
            margin: 0 5px;
            animation: blink 1s infinite;
        }
        
        .timeout-message {
            font-size: 12px;
            opacity: 0.8;
            margin-top: 5px;
        }
        
        @@keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.02); }
            100% { transform: scale(1); }
        }
        
        @@keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0.3; }
        }
        
        .timeout-warning {
            background: linear-gradient(135deg, #ff4757, #ff6b7a) !important;
            animation: pulse 1s infinite !important;
        }
        
        .timeout-critical {
            background: linear-gradient(135deg, #ff3838, #ff4757) !important;
            animation: pulse 0.5s infinite !important;
        }
    </style>
}

<!-- 3D Interactive Booking Scene Container -->
<div class="booking-scene-container">
    <!-- Parallax Background Layers -->
    <div class="parallax-layer booking-parallax-bg"></div>
    <div class="parallax-layer booking-dots-bg"></div>
    
    <!-- Animated Dots Container -->
    <div class="booking-animated-dots-container">
        <!-- Dynamic dots will be created by JavaScript -->
    </div>
    
    <!-- Interactive Particles -->
    <div class="booking-particles-3d"></div>
    
    <!-- Floating 3D Elements Container -->
    <div class="booking-floating-3d-container">
        <!-- Dynamic floating elements will be created by JavaScript -->
    </div>

    <div class="booking-summary-container">
        <!-- Enhanced Header Section -->
        <div class="booking-hero-section">
            <div class="container-fluid">
                <div class="booking-hero-content-3d">
                    <h1 class="booking-hero-title-3d">
                        <i class="bi bi-clipboard-check-fill booking-hero-icon"></i>
                        Booking Summary
                    </h1>
                    <p class="booking-hero-subtitle-3d">
                        Review your booking details before proceeding to payment
                    </p>
                    <div class="booking-progress-indicator">
                        <div class="progress-step completed">
                            <span class="step-number">1</span>
                            <span class="step-label">Search</span>
                        </div>
                        <div class="progress-step completed">
                            <span class="step-number">2</span>
                            <span class="step-label">Details</span>
                        </div>
                        <div class="progress-step active">
                            <span class="step-number">3</span>
                            <span class="step-label">Summary</span>
                        </div>
                        <div class="progress-step">
                            <span class="step-number">4</span>
                            <span class="step-label">Payment</span>
                        </div>
                    </div>
                    <div class="booking-security-badge">
                        <i class="bi bi-shield-check"></i>
                        <div class="badge-content">
                            <div class="badge-title">Secure Booking</div>
                            <div class="badge-subtitle">SSL Protected</div>
                        </div>
                    </div>
                    
                    <!-- Booking Timeout Countdown -->
                    <div class="booking-timeout-card mt-4" id="bookingTimeoutCard" style="display: none;">
                        <div class="timeout-header">
                            <i class="bi bi-clock-history"></i>
                            <span>Booking Timeout</span>
                        </div>
                        <div class="timeout-timer" id="timeoutTimer">
                            <span class="timeout-minutes" id="timeoutMinutes">15</span>
                            <span class="timeout-separator">:</span>
                            <span class="timeout-seconds" id="timeoutSeconds">00</span>
                        </div>
                        <div class="timeout-message">
                            Complete your booking before time expires
                        </div>
                    </div>
                </div>
            </div>
        </div>

    <div class="container-fluid py-5 px-4">
        <div class="row g-4">
            <!-- Enhanced Car Details Card -->
            <div class="col-lg-8">
                <div class="booking-card-3d">
                    <div class="card-header-3d">
                        <h5 class="card-title-3d">
                            <i class="bi bi-car-front-fill"></i>
                            <span>Vehicle Details</span>
                        </h5>
                    </div>
                    <div class="card-body-3d">
                        <div class="row g-0">
                            <!-- Car Image -->
                            <div class="col-md-4">
                                <div class="car-image-container-3d">
                                    <img src="@(!string.IsNullOrEmpty(Model.ImagePath) ? $"/images/cars/{Model.ImagePath}" : "/images/default-car.jpg")"
                                         class="car-image-3d"
                                         alt="@Model.CarName @Model.CarModel"
                                         onerror="this.src='/images/default-car.jpg'" />
                                    <div class="car-image-glow"></div>
                                </div>
                            </div>

                            <!-- Car Info -->
                            <div class="col-md-8">
                                <div class="car-info-3d">
                                    <h4 class="car-name-3d">@Model.CarName @Model.CarModel</h4>
                                    <div class="car-details-grid-3d">
                                        <div class="detail-item-3d">
                                            <i class="bi bi-geo-alt detail-icon-3d"></i>
                                            <div class="detail-content-3d">
                                                <span class="detail-label-3d">Pickup</span>
                                                <span class="detail-value-3d">@Model.PickupLocation</span>
                                                <button type="button" class="btn btn-sm btn-outline-primary ms-2" onclick="selectPreciseLocation('pickup')">
                                                    <i class="bi bi-geo-alt"></i> Select Precise Location
                                                </button>
                                            </div>
                                        </div>
                                        <div class="detail-item-3d">
                                            <i class="bi bi-geo-alt-fill detail-icon-3d"></i>
                                            <div class="detail-content-3d">
                                                <span class="detail-label-3d">Drop-off</span>
                                                <span class="detail-value-3d">@Model.DropLocation</span>
                                                <button type="button" class="btn btn-sm btn-outline-primary ms-2" onclick="selectPreciseLocation('drop')">
                                                    <i class="bi bi-geo-alt"></i> Select Precise Location
                                                </button>
                                            </div>
                                        </div>
                                        <div class="detail-item-3d">
                                            <i class="bi bi-calendar-event detail-icon-3d"></i>
                                            <div class="detail-content-3d">
                                                <span class="detail-label-3d">Pickup Date</span>
                                                <span class="detail-value-3d">@Model.PickupDate.ToString("MMM dd, yyyy HH:mm")</span>
                                            </div>
                                        </div>
                                        <div class="detail-item-3d">
                                            <i class="bi bi-calendar-check detail-icon-3d"></i>
                                            <div class="detail-content-3d">
                                                <span class="detail-label-3d">Return Date</span>
                                                <span class="detail-value-3d">@Model.DropDate.ToString("MMM dd, yyyy HH:mm")</span>
                                            </div>
                                        </div>
                                        <div class="detail-item-3d">
                                            <i class="bi bi-clock detail-icon-3d"></i>
                                            <div class="detail-content-3d">
                                                <span class="detail-label-3d">Duration</span>
                                                <span class="detail-value-3d">@Model.Days day(s)</span>
                                            </div>
                                        </div>
                                        <div class="detail-item-3d">
                                            <i class="bi bi-currency-dollar detail-icon-3d"></i>
                                            <div class="detail-content-3d">
                                                <span class="detail-label-3d">Daily Rate</span>
                                                <span class="detail-value-3d">$@Model.DailyRate.ToString("N2")</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Customer Details Card -->
                <div class="booking-card-3d">
                    <div class="card-header-3d">
                        <h5 class="card-title-3d">
                            <i class="bi bi-person-check"></i>
                            <span>Customer Information</span>
                        </h5>
                    </div>
                    <div class="card-body-3d">
                        <div class="customer-form-3d">
                            <div class="form-group-3d">
                                <label class="form-label-3d">Full Name</label>
                                <input type="text" class="form-control-3d" value="@Model.CustomerName" readonly />
                            </div>
                            <div class="form-group-3d">
                                <label class="form-label-3d">Email Address</label>
                                <input type="email" class="form-control-3d" value="@Model.CustomerEmail" readonly />
                            </div>
                            <div class="form-group-3d">
                                <label class="form-label-3d">Phone Number</label>
                                <input type="tel" class="form-control-3d" placeholder="+1 (555) 123-4567" 
                                       value="@Model.CustomerPhone" />
                            </div>
                            <div class="form-group-3d">
                                <label class="form-label-3d">Driver's License</label>
                                <input type="text" class="form-control-3d" placeholder="License Number" required />
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Additional Driver (Optional) -->
                <div class="booking-card-3d">
                    <div class="card-header-3d">
                        <h5 class="card-title-3d">
                            <i class="bi bi-person-plus"></i>
                            <span>Additional Driver (Optional)</span>
                        </h5>
                    </div>
                    <div class="card-body-3d">
                        <div class="additional-driver-3d">
                            <div class="form-check-3d">
                                <input class="form-check-input-3d" type="checkbox" id="addAdditionalDriver" 
                                       onchange="toggleAdditionalDriver()">
                                <label class="form-check-label-3d" for="addAdditionalDriver">
                                    Add an additional driver to this booking
                                </label>
                            </div>
                            <div id="additionalDriverForm" class="additional-driver-form-3d d-none">
                                <div class="form-group-3d">
                                    <label class="form-label-3d">Driver Name</label>
                                    <input type="text" class="form-control-3d" name="AdditionalDriverName" 
                                           placeholder="Full Name" />
                                </div>
                                <div class="form-group-3d">
                                    <label class="form-label-3d">Driver's License</label>
                                    <input type="text" class="form-control-3d" name="AdditionalDriverLicense" 
                                           placeholder="License Number" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
        </div>

        <!-- Price Summary & Actions -->
        <div class="col-lg-4">
            <!-- KYC Status Card -->
            <div class="booking-card-3d">
                <div class="card-body-3d text-center">
                    @if (Model.HasKYC)
                    {
                        <div class="kyc-status-verified-3d">
                            <i class="bi bi-shield-check kyc-icon-3d"></i>
                            <h5 class="kyc-title-3d">KYC Verified</h5>
                            <p class="kyc-subtitle-3d">Your identity has been verified. You can proceed with the booking.</p>
                        </div>
                    }
                    else
                    {
                        <div class="kyc-status-required-3d">
                            <i class="bi bi-shield-exclamation kyc-icon-3d"></i>
                            <h5 class="kyc-title-3d">KYC Required</h5>
                            <p class="kyc-subtitle-3d">Please upload your KYC documents before proceeding.</p>
                            <button type="button" class="btn-3d-interactive btn-warning-3d" onclick="showKYCUploadModal()">
                                <i class="bi bi-upload"></i>
                                Upload KYC Documents
                            </button>
                        </div>
                    }
                </div>
            </div>

            <!-- Price Breakdown Card -->
            <div class="booking-card-3d">
                <div class="card-header-3d">
                    <h5 class="card-title-3d">
                        <i class="bi bi-receipt"></i>
                        <span>Price Breakdown</span>
                    </h5>
                </div>
                <div class="card-body-3d">
                    <div class="pricing-breakdown-3d">
                        <div class="pricing-item-3d">
                            <span class="pricing-label-3d">Daily Rate</span>
                            <span class="pricing-value-3d">$@Model.DailyRate.ToString("N2")</span>
                        </div>
                        <div class="pricing-item-3d">
                            <span class="pricing-label-3d">Duration</span>
                            <span class="pricing-value-3d">@Model.Days day(s)</span>
                        </div>
                        <div class="pricing-item-3d">
                            <span class="pricing-label-3d">Subtotal</span>
                            <span class="pricing-value-3d">$@((Model.DailyRate * Model.Days).ToString("N2"))</span>
                        </div>
                        <div class="pricing-item-3d">
                            <span class="pricing-label-3d">Service Fee</span>
                            <span class="pricing-value-3d text-success-3d">FREE</span>
                        </div>
                        <div class="pricing-item-3d">
                            <span class="pricing-label-3d">Insurance</span>
                            <span class="pricing-value-3d text-success-3d">Included</span>
                        </div>
                        <div class="pricing-divider"></div>
                        <div class="total-item-3d">
                            <span class="pricing-label-3d">Total</span>
                            <span class="pricing-value-3d text-primary-3d">$@Model.EstimatedCost.ToString("N2")</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="action-buttons-3d">
                @if (Model.HasKYC)
                {
                    <form method="post" asp-action="ConfirmBooking" asp-controller="Bookings" id="bookingForm">
                        @Html.AntiForgeryToken()

                        <input type="hidden" name="CarId" value="@Model.CarId" />
                        <input type="hidden" name="PickupDate" value="@Model.PickupDate.ToString("o")" />
                        <input type="hidden" name="DropDate" value="@Model.DropDate.ToString("o")" />
                        <input type="hidden" name="PickupLocation" value="@Model.PickupLocation" />
                        <input type="hidden" name="DropLocation" value="@Model.DropLocation" />
                        <input type="hidden" name="EstimatedCost" value="@Model.EstimatedCost" />
                        <input type="hidden" name="PickupLatitude" id="pickupLatitude" value="@Model.PickupLatitude" />
                        <input type="hidden" name="PickupLongitude" id="pickupLongitude" value="@Model.PickupLongitude" />
                        <input type="hidden" name="DropLatitude" id="dropLatitude" value="@Model.DropLatitude" />
                        <input type="hidden" name="DropLongitude" id="dropLongitude" value="@Model.DropLongitude" />

                        <button type="submit" class="btn-3d-interactive btn-primary-3d booking-submit-btn">
                            <i class="bi bi-credit-card"></i>
                            Proceed to Payment
                        </button>
                    </form>
                }
                else
                {
                    <button type="button" class="btn-3d-interactive btn-secondary-3d" disabled>
                        <i class="bi bi-lock"></i>
                        Complete KYC First
                    </button>
                }
                
                <a href="javascript:history.back()" class="btn-3d-interactive btn-secondary-3d back-to-details-btn">
                    <i class="bi bi-arrow-left"></i>
                    Back to Car Details
                </a>
            </div>
        </div>
    </div>
    </div>
</div>

<!-- Location Selection Modal -->
<div class="modal fade" id="locationSelectionModal" tabindex="-1" aria-labelledby="locationSelectionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="locationSelectionModalLabel">
                    <i class="bi bi-geo-alt"></i> Select Precise Location
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="locationSearch" class="form-label">Search for location:</label>
                    <input type="text" id="locationSearch" class="form-control" placeholder="Enter address or place name">
                </div>
                <div id="locationMap" style="height: 400px; width: 100%; border-radius: 8px;"></div>
                <div class="mt-3">
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i>
                        <strong>Selected Location:</strong> <span id="selectedLocationText">Click on the map to select a precise location</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmLocationBtn" onclick="confirmLocationSelection()">
                    <i class="bi bi-check-circle"></i> Confirm Location
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/3d-interactive-landing.js" asp-append-version="true"></script>
    
    <!-- Google Places API -->
    <script async defer src="https://maps.googleapis.com/maps/api/js?key=@ViewBag.GooglePlacesApiKey&libraries=places&callback=initLocationSelection"></script>
    
    <script>
        // Location selection variables
        let locationMap;
        let locationMarker;
        let currentLocationType = 'pickup'; // 'pickup' or 'drop'
        let selectedLocation = null;
        let geocoder;
        let placesService;

        // Initialize location selection
        function initLocationSelection() {
            console.log('Google Maps API loaded for location selection');
            geocoder = new google.maps.Geocoder();
        }

        // Open location selection modal
        function selectPreciseLocation(locationType) {
            currentLocationType = locationType;
            const modal = new bootstrap.Modal(document.getElementById('locationSelectionModal'));
            modal.show();
            
            // Initialize map when modal is shown
            setTimeout(() => {
                initializeLocationMap();
            }, 500);
        }

        // Initialize the location selection map
        function initializeLocationMap() {
            if (typeof google === 'undefined') {
                console.error('Google Maps API not loaded');
                return;
            }

            const mapElement = document.getElementById('locationMap');
            if (!mapElement) return;

            // Initialize map
            locationMap = new google.maps.Map(mapElement, {
                zoom: 13,
                center: { lat: 40.7128, lng: -74.0060 }, // Default to NYC
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });

            // Initialize Places service
            placesService = new google.maps.places.PlacesService(locationMap);

            // Add click listener to map
            locationMap.addListener('click', function(event) {
                const lat = event.latLng.lat();
                const lng = event.latLng.lng();
                
                // Update marker
                if (locationMarker) {
                    locationMarker.setPosition(event.latLng);
                } else {
                    locationMarker = new google.maps.Marker({
                        position: event.latLng,
                        map: locationMap,
                        title: 'Selected Location'
                    });
                }

                // Get address from coordinates
                geocoder.geocode({ location: event.latLng }, function(results, status) {
                    if (status === 'OK' && results[0]) {
                        selectedLocation = {
                            lat: lat,
                            lng: lng,
                            address: results[0].formatted_address
                        };
                        document.getElementById('selectedLocationText').textContent = results[0].formatted_address;
                    }
                });
            });

            // Initialize search box
            const searchBox = new google.maps.places.SearchBox(document.getElementById('locationSearch'));
            
            // Bias the SearchBox results towards current map's viewport
            locationMap.addListener('bounds_changed', function() {
                searchBox.setBounds(locationMap.getBounds());
            });

            // Listen for the event fired when the user selects a prediction
            searchBox.addListener('places_changed', function() {
                const places = searchBox.getPlaces();
                if (places.length === 0) return;

                const place = places[0];
                if (!place.geometry || !place.geometry.location) return;

                // Center map on selected place
                locationMap.setCenter(place.geometry.location);
                locationMap.setZoom(15);

                // Add marker
                if (locationMarker) {
                    locationMarker.setPosition(place.geometry.location);
                } else {
                    locationMarker = new google.maps.Marker({
                        position: place.geometry.location,
                        map: locationMap,
                        title: place.name
                    });
                }

                // Store selected location
                selectedLocation = {
                    lat: place.geometry.location.lat(),
                    lng: place.geometry.location.lng(),
                    address: place.formatted_address || place.name
                };
                document.getElementById('selectedLocationText').textContent = place.formatted_address || place.name;
            });
        }

        // Confirm location selection
        function confirmLocationSelection() {
            if (!selectedLocation) {
                alert('Please select a location on the map first.');
                return;
            }

            // Update the hidden form fields
            if (currentLocationType === 'pickup') {
                document.getElementById('pickupLatitude').value = selectedLocation.lat;
                document.getElementById('pickupLongitude').value = selectedLocation.lng;
                
                // Update the display text
                const pickupElement = document.querySelector('.detail-item-3d:first-child .detail-value-3d');
                if (pickupElement) {
                    pickupElement.textContent = selectedLocation.address;
                }
            } else {
                document.getElementById('dropLatitude').value = selectedLocation.lat;
                document.getElementById('dropLongitude').value = selectedLocation.lng;
                
                // Update the display text
                const dropElement = document.querySelector('.detail-item-3d:nth-child(2) .detail-value-3d');
                if (dropElement) {
                    dropElement.textContent = selectedLocation.address;
                }
            }

            // Close modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('locationSelectionModal'));
            modal.hide();

            // Show success message
            showToast('Location updated successfully!', 'success');
        }

        // Show toast notification
        function showToast(message, type = 'info') {
            // Create toast element
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type} border-0`;
            toast.setAttribute('role', 'alert');
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">${message}</div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;

            // Add to page
            document.body.appendChild(toast);

            // Show toast
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();

            // Remove from DOM after hiding
            toast.addEventListener('hidden.bs.toast', () => {
                document.body.removeChild(toast);
            });
        }

        // Enhanced 3D Interactive Booking Summary
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize 3D scene elements
            initializeBookingScene3D();
            
            // Initialize enhanced animations
            initializeBookingAnimations();
            
            // Enhanced form validation
            setupFormValidation();
            
            // Progress indicator animation
            animateProgressSteps();
            
            // Parallax scrolling effect
            setupParallaxScrolling();
        });
        
        function initializeBookingScene3D() {
            // Create animated dots
            createAnimatedDots();
            
            // Create floating particles
            createFloatingParticles();
            
            // Create floating 3D elements
            createFloating3DElements();
        }
        
        function createAnimatedDots() {
            const container = document.querySelector('.booking-animated-dots-container');
            if (!container) return;
            
            for (let i = 0; i < 20; i++) {
                const dot = document.createElement('div');
                dot.className = 'booking-floating-dot';
                dot.style.left = Math.random() * 100 + '%';
                dot.style.top = Math.random() * 100 + '%';
                dot.style.width = Math.random() * 8 + 4 + 'px';
                dot.style.height = dot.style.width;
                dot.style.animationDelay = Math.random() * 8 + 's';
                dot.style.animationDuration = (Math.random() * 4 + 6) + 's';
                container.appendChild(dot);
            }
        }
        
        function createFloatingParticles() {
            const container = document.querySelector('.booking-particles-3d');
            if (!container) return;
            
            for (let i = 0; i < 15; i++) {
                const particle = document.createElement('div');
                particle.className = 'booking-particle-3d';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.top = Math.random() * 100 + '%';
                particle.style.animationDelay = Math.random() * 6 + 's';
                particle.style.animationDuration = (Math.random() * 3 + 4) + 's';
                container.appendChild(particle);
            }
        }
        
        function createFloating3DElements() {
            const container = document.querySelector('.booking-floating-3d-container');
            if (!container) return;
            
            for (let i = 0; i < 8; i++) {
                const element = document.createElement('div');
                element.className = 'booking-floating-element-3d';
                element.style.left = Math.random() * 100 + '%';
                element.style.top = Math.random() * 100 + '%';
                element.style.width = Math.random() * 60 + 40 + 'px';
                element.style.height = Math.random() * 60 + 40 + 'px';
                element.style.animationDelay = Math.random() * 10 + 's';
                element.style.animationDuration = (Math.random() * 5 + 8) + 's';
                container.appendChild(element);
            }
        }
        
        function setupParallaxScrolling() {
            const parallaxLayers = document.querySelectorAll('.parallax-layer');
            
            window.addEventListener('scroll', () => {
                const scrolled = window.pageYOffset;
                const rate = scrolled * -0.5;
                
                parallaxLayers.forEach((layer, index) => {
                    const speed = (index + 1) * 0.1;
                    layer.style.transform = `translateY(${rate * speed}px)`;
                });
            });
        }
        
        function initializeBookingAnimations() {
            // Animate cards on scroll
            const cards = document.querySelectorAll('.booking-card-3d');
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.animationDelay = '0s';
                        entry.target.classList.add('animate-in');
                    }
                });
            }, { threshold: 0.1 });
            
            cards.forEach(card => observer.observe(card));
        }
        
        function animateProgressSteps() {
            const steps = document.querySelectorAll('.progress-step');
            steps.forEach((step, index) => {
                setTimeout(() => {
                    step.style.opacity = '1';
                    step.style.transform = 'translateY(0)';
                }, index * 200);
            });
        }
        
        function setupFormValidation() {
            const form = document.getElementById('bookingForm');
            if (form) {
                form.addEventListener('submit', function(e) {
                    if (!validateBookingForm()) {
                        e.preventDefault();
                        return false;
                    }
                    
                    // Show loading state
                    const submitBtn = form.querySelector('button[type="submit"]');
                    if (submitBtn) {
                        submitBtn.innerHTML = '<i class="bi bi-hourglass-split"></i> Processing...';
                        submitBtn.disabled = true;
                    }
                });
            }
        }
        
        function validateBookingForm() {
            const driverLicense = document.querySelector('input[placeholder="License Number"]');
            
            if (!driverLicense || !driverLicense.value.trim()) {
                showValidationError('Please enter your driver\'s license number.', driverLicense);
                return false;
            }
            
            // Additional driver validation
            const additionalDriverCheckbox = document.getElementById('addAdditionalDriver');
            if (additionalDriverCheckbox && additionalDriverCheckbox.checked) {
                const additionalDriverName = document.querySelector('input[name="AdditionalDriverName"]');
                const additionalDriverLicense = document.querySelector('input[name="AdditionalDriverLicense"]');
                
                if (!additionalDriverName?.value.trim() || !additionalDriverLicense?.value.trim()) {
                    showValidationError('Please complete all additional driver information.');
                    return false;
                }
            }
            
            return true;
        }
        
        function showValidationError(message, element = null) {
            // Create enhanced error notification
            const errorDiv = document.createElement('div');
            errorDiv.className = 'validation-error-3d';
            errorDiv.innerHTML = `
                <div class="error-content">
                    <i class="bi bi-exclamation-triangle-fill"></i>
                    <span>${message}</span>
                    <button class="close-error" onclick="this.parentElement.parentElement.remove()">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
            `;
            
            document.body.appendChild(errorDiv);
            
            // Remove after 5 seconds
            setTimeout(() => {
                if (errorDiv.parentElement) {
                    errorDiv.remove();
                }
            }, 5000);
            
            // Focus on problematic element
            if (element) {
                element.focus();
                element.style.borderColor = '#FF6B6B';
                setTimeout(() => {
                    element.style.borderColor = '';
                }, 3000);
            }
        }
        
        function toggleAdditionalDriver() {
            const checkbox = document.getElementById('addAdditionalDriver');
            const form = document.getElementById('additionalDriverForm');
            
            if (checkbox && form) {
                if (checkbox.checked) {
                    form.classList.remove('d-none');
                    form.style.opacity = '0';
                    form.style.transform = 'translateY(20px)';
                    
                    // Animate in
                    setTimeout(() => {
                        form.style.transition = 'all 0.3s ease';
                        form.style.opacity = '1';
                        form.style.transform = 'translateY(0)';
                    }, 10);
                } else {
                    // Animate out
                    form.style.transition = 'all 0.3s ease';
                    form.style.opacity = '0';
                    form.style.transform = 'translateY(-20px)';
                    
                    setTimeout(() => {
                        form.classList.add('d-none');
                        // Clear form fields
                        form.querySelectorAll('input').forEach(input => input.value = '');
                    }, 300);
                }
            }
        }
        
        // Enhanced CSS for validation errors
        const style = document.createElement('style');
        style.textContent = `
            .validation-error-3d {
                position: fixed;
                top: 20px;
                right: 20px;
                background: linear-gradient(135deg, rgba(255, 107, 107, 0.95) 0%, rgba(220, 53, 69, 0.95) 100%);
                color: white;
                padding: 1rem 1.5rem;
                border-radius: 15px;
                box-shadow: 0 10px 30px rgba(255, 107, 107, 0.3);
                backdrop-filter: blur(10px);
                z-index: 9999;
                animation: slideInError 0.3s ease;
                border: 1px solid rgba(255, 255, 255, 0.2);
            }
            
            .error-content {
                display: flex;
                align-items: center;
                gap: 0.75rem;
            }
            
            .close-error {
                background: none;
                border: none;
                color: white;
                font-size: 1.2rem;
                cursor: pointer;
                opacity: 0.8;
                transition: opacity 0.2s ease;
            }
            
            .close-error:hover {
                opacity: 1;
            }
            
            @@keyframes slideInError {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
        `;
        document.head.appendChild(style);
        
        // Booking Timeout Countdown Timer
        let bookingTimeoutInterval;
        let bookingStartTime;
        let isBookingInProgress = false;
        
        // Check if there's an active booking session
        function checkBookingSession() {
            const bookingStartTimeStr = sessionStorage.getItem('bookingStartTime');
            if (bookingStartTimeStr) {
                bookingStartTime = new Date(bookingStartTimeStr);
                const now = new Date();
                const elapsed = (now - bookingStartTime) / 1000; // seconds
                const remaining = (15 * 60) - elapsed; // 15 minutes in seconds
                
                if (remaining > 0) {
                    startCountdown(remaining);
                } else {
                    // Timeout expired, clear session
                    clearBookingSession();
                }
            }
        }
        
        // Start the countdown timer
        function startCountdown(totalSeconds) {
            isBookingInProgress = true;
            document.getElementById('bookingTimeoutCard').style.display = 'block';
            
            bookingTimeoutInterval = setInterval(() => {
                const minutes = Math.floor(totalSeconds / 60);
                const seconds = totalSeconds % 60;
                
                document.getElementById('timeoutMinutes').textContent = minutes.toString().padStart(2, '0');
                document.getElementById('timeoutSeconds').textContent = seconds.toString().padStart(2, '0');
                
                // Change styling based on remaining time
                const timeoutCard = document.getElementById('bookingTimeoutCard');
                if (totalSeconds <= 60) {
                    timeoutCard.className = 'booking-timeout-card mt-4 timeout-critical';
                } else if (totalSeconds <= 300) { // 5 minutes
                    timeoutCard.className = 'booking-timeout-card mt-4 timeout-warning';
                }
                
                if (totalSeconds <= 0) {
                    clearInterval(bookingTimeoutInterval);
                    handleBookingTimeout();
                }
                
                totalSeconds--;
            }, 1000);
        }
        
        // Handle booking timeout
        function handleBookingTimeout() {
            document.getElementById('bookingTimeoutCard').innerHTML = `
                <div class="timeout-header">
                    <i class="bi bi-exclamation-triangle"></i>
                    <span>Booking Expired</span>
                </div>
                <div class="timeout-timer">
                    <span style="font-size: 24px;">00:00</span>
                </div>
                <div class="timeout-message">
                    Your booking session has expired. Please search again.
                </div>
            `;
            
            // Show notification
            showNotification('Your booking session has expired. Please search again.', 'warning');
            
            // Redirect to search page after 3 seconds
            setTimeout(() => {
                clearBookingSession();
                window.location.href = '/';
            }, 3000);
        }
        
        // Clear booking session
        function clearBookingSession() {
            sessionStorage.removeItem('bookingStartTime');
            isBookingInProgress = false;
            if (bookingTimeoutInterval) {
                clearInterval(bookingTimeoutInterval);
            }
            document.getElementById('bookingTimeoutCard').style.display = 'none';
        }
        
        // Show notification
        function showNotification(message, type = 'info') {
            // Create toast notification
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type === 'warning' ? 'warning' : 'info'} border-0`;
            toast.setAttribute('role', 'alert');
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            
            // Add to page
            let toastContainer = document.getElementById('toast-container');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toast-container';
                toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
                toastContainer.style.zIndex = '9999';
                document.body.appendChild(toastContainer);
            }
            
            toastContainer.appendChild(toast);
            
            // Show toast
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            
            // Remove from DOM after hiding
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            checkBookingSession();
        });
    </script>
}
