<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Admin Panel</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link href="~/lib/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/3d-interactive-landing.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin-landing-theme.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/echo-admin.css" asp-append-version="true" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=Poppins:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
</head>
<body class="admin-body-3d">
    <!-- 3D Background with Parallax Effects -->
    <div class="admin-background-3d">
        <div class="parallax-layer admin-parallax-bg"></div>
        <div class="parallax-layer admin-white-dots-bg"></div>
        <div class="admin-pattern-3d"></div>
    </div>
    
    <!-- Animated Background Elements -->
    <div class="admin-particles-container">
        <div class="admin-particle"></div>
        <div class="admin-particle"></div>
        <div class="admin-particle"></div>
        <div class="admin-particle"></div>
        <div class="admin-particle"></div>
    </div>
    
    <!-- Floating Admin Icons -->
    <div class="floating-admin-container">
        <i class="floating-admin bi bi-shield-lock"></i>
        <i class="floating-admin bi bi-gear"></i>
        <i class="floating-admin bi bi-graph-up"></i>
    </div>

    <div class="admin-wrapper">
        <!-- Enhanced 3D Sidebar -->
        <nav class="admin-sidebar-3d" id="adminSidebar">
            <div class="sidebar-header-3d">
                <div class="sidebar-brand-3d">
                    <div class="brand-logo-container-3d">
                        <i class="bi bi-shield-lock"></i>
                        <div class="brand-glow-3d"></div>
                    </div>
                    <span class="brand-text-3d">Admin Panel</span>
                </div>
                <button class="sidebar-toggle d-lg-none" type="button" data-bs-toggle="collapse" data-bs-target="#sidebarMenu">
                    <i class="bi bi-x"></i>
                </button>
            </div>

            <div class="sidebar-menu-3d show" id="sidebarMenu">
                <ul class="nav flex-column">
                    <li class="nav-item-3d">
                        <a class="nav-link-3d @(ViewContext.RouteData.Values["Action"]?.ToString() == "Index" ? "active" : "")" asp-controller="Admin" asp-action="Index">
                            <div class="nav-icon-3d">
                                <i class="bi bi-speedometer2"></i>
                            </div>
                            <span>Dashboard</span>
                        </a>
                    </li>
                    <li class="nav-item-3d">
                        <a class="nav-link-3d" asp-controller="CarManagement" asp-action="Index">
                            <div class="nav-icon-3d">
                                <i class="bi bi-car-front"></i>
                            </div>
                            <span>Car Management</span>
                            @if (ViewBag.PendingCarsCount > 0)
                            {
                                <span class="badge bg-warning ms-auto">@ViewBag.PendingCarsCount</span>
                            }
                        </a>
                    </li>
                    <li class="nav-item-3d">
                        <a class="nav-link-3d @(ViewContext.RouteData.Values["Action"]?.ToString() == "KYC" ? "active" : "")" asp-controller="Admin" asp-action="KYC">
                            <div class="nav-icon-3d">
                                <i class="bi bi-file-earmark-check"></i>
                            </div>
                            <span>KYC Review</span>
                            @if (ViewBag.PendingKYCCount > 0)
                            {
                                <span class="badge bg-info ms-auto">@ViewBag.PendingKYCCount</span>
                            }
                        </a>
                    </li>
                    <li class="nav-item-3d">
                        <a class="nav-link-3d @(ViewContext.RouteData.Values["Action"]?.ToString() == "BookingsEnhanced" ? "active" : "")" asp-controller="Admin" asp-action="BookingsEnhanced">
                            <div class="nav-icon-3d">
                                <i class="bi bi-calendar-check"></i>
                            </div>
                            <span>Booking Management</span>
                        </a>
                    </li>
                    <li class="nav-item-3d">
                        <a class="nav-link-3d @(ViewContext.RouteData.Values["Action"]?.ToString() == "Customers" ? "active" : "")" asp-controller="Admin" asp-action="Customers">
                            <div class="nav-icon-3d">
                                <i class="bi bi-people"></i>
                            </div>
                            <span>Customer Management</span>
                        </a>
                    </li>
                    <li class="nav-item-3d">
                        <a class="nav-link-3d @(ViewContext.RouteData.Values["Action"]?.ToString() == "KPI" ? "active" : "")" asp-controller="Admin" asp-action="KPI">
                            <div class="nav-icon-3d">
                                <i class="bi bi-bar-chart-line"></i>
                            </div>
                            <span>KPI Dashboard</span>
                        </a>
                    </li>
                </ul>
            </div>
            
            <!-- Fixed Sidebar Footer -->
            <div class="sidebar-footer-3d">
                <div class="nav-item-3d">
                    <a class="nav-link-3d" asp-controller="Home" asp-action="Index" target="_blank">
                        <div class="nav-icon-3d">
                            <i class="bi bi-globe"></i>
                        </div>
                        <span>View Site</span>
                    </a>
                </div>
                <div class="nav-item-3d">
                    <form asp-controller="Account" asp-action="Logout" method="post" class="d-inline w-100">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="nav-link-3d logout-btn-3d w-100 text-start">
                            <i class="bi bi-box-arrow-right me-2"></i>
                            <span>Logout</span>
                        </button>
                    </form>
                </div>
            </div>
        </nav>

        <!-- Enhanced 3D Main Content -->
        <div class="admin-main-3d">
            <!-- Enhanced 3D Top Navigation -->
            <header class="admin-header-3d">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center">
                        <button class="sidebar-toggle-mobile d-lg-none me-3" type="button" aria-label="Toggle sidebar">
                            <i class="bi bi-list"></i>
                        </button>
                        <h4 class="page-title mb-0">@ViewData["Title"]</h4>
                    </div>
                    
                    <div class="header-actions">
                        <!-- EchoAdmin Chat Toggle Button -->
                        <div id="echoAdminToggle" class="echo-admin-toggle-header">
                            <i class="bi bi-robot"></i>
                            <span class="echo-admin-badge">EchoAdmin</span>
                        </div>
                        
                        <div class="dropdown ms-3">
                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                <i class="bi bi-bell"></i>
                                <span class="badge bg-danger">3</span>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><h6 class="dropdown-header">Notifications</h6></li>
                                <li><a class="dropdown-item" href="#"><i class="bi bi-car-front me-2"></i>New car pending approval</a></li>
                                <li><a class="dropdown-item" href="#"><i class="bi bi-file-earmark me-2"></i>KYC document uploaded</a></li>
                                <li><a class="dropdown-item" href="#"><i class="bi bi-calendar me-2"></i>New booking created</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item text-center" href="#">View all notifications</a></li>
                            </ul>
                        </div>
                        
                        <div class="dropdown ms-3">
                            <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                <i class="bi bi-person-circle"></i>
                                @User.Identity?.Name
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item" href="#"><i class="bi bi-person me-2"></i>Profile</a></li>
                                <li><a class="dropdown-item" href="#"><i class="bi bi-gear me-2"></i>Settings</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li>
                                    <form asp-controller="Account" asp-action="Logout" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="dropdown-item">
                                            <i class="bi bi-box-arrow-right me-2"></i>Logout
                                        </button>
                                    </form>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </header>

            <!-- EchoAdmin Chat Window -->
            <div id="echoAdminWindow" class="echo-admin-window" style="display: none;">
                <div class="echo-admin-header">
                    <div class="echo-admin-title">
                        <i class="bi bi-robot me-2"></i>
                        <span>EchoAdmin</span>
                        <span class="echo-admin-status">Online</span>
                    </div>
                    <button id="echoAdminClose" class="echo-admin-close">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
                
                <div class="echo-admin-messages" id="echoAdminMessages">
                    <div class="echo-admin-message">
                        <div class="echo-admin-avatar">
                            <i class="bi bi-robot"></i>
                        </div>
                        <div class="echo-admin-content">
                            <div class="echo-admin-text">
                                Hello! I'm EchoAdmin, your intelligent assistant. I can help you get information from the database. 
                                <ul>
                                    <li>Generate reports and analytics</li>
                                    <li>Answer questions about customers, bookings, cars</li>
                                    <li>Create charts and visualizations</li>
                                    <li>Help with data analysis</li>
                                </ul>
                                <p>Try asking me something like: "Show me recent bookings" or "How many cars are available?"</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="echo-admin-input-container">
                    <div class="echo-admin-input-group">
                        <input type="text" id="echoAdminInput" class="echo-admin-input" placeholder="Ask me anything about your data...">
                        <button id="echoAdminSend" class="echo-admin-send">
                            <i class="bi bi-send"></i>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Enhanced 3D Page Content -->
            <main class="admin-content-3d">
                @RenderBody()
            </main>
        </div>
    </div>

    <!-- Enhanced 3D Toast Notifications Container -->
    <div class="toast-container-3d position-fixed top-0 end-0 p-3" style="z-index: 9999;">
        @if (TempData["Success"] != null)
        {
            <div class="toast-3d toast-success" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true" data-bs-delay="5000">
                <div class="toast-header-3d">
                    <div class="toast-icon-3d">
                        <i class="bi bi-check-circle-fill"></i>
                    </div>
                    <strong class="me-auto">Success</strong>
                    <button type="button" class="btn-close-3d" data-bs-dismiss="toast" aria-label="Close">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
                <div class="toast-body-3d">
                    @TempData["Success"]
                </div>
            </div>
        }

        @if (TempData["Error"] != null)
        {
            <div class="toast-3d toast-error" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true" data-bs-delay="7000">
                <div class="toast-header-3d">
                    <div class="toast-icon-3d">
                        <i class="bi bi-exclamation-triangle-fill"></i>
                    </div>
                    <strong class="me-auto">Error</strong>
                    <button type="button" class="btn-close-3d" data-bs-dismiss="toast" aria-label="Close">
                        <i class="bi bi-x"></i>
                    </button>
                </div>
                <div class="toast-body-3d">
                    @TempData["Error"]
                </div>
            </div>
        }
    </div>


    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="~/js/admin.js" asp-append-version="true"></script>
    <script src="~/js/admin-enhanced.js" asp-append-version="true"></script>
    <!-- Google Maps API will be loaded dynamically when needed -->
    
    <!-- Enhanced 3D Toast Notifications Script -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize all toast notifications
            var toastElements = document.querySelectorAll('.toast-3d');
            toastElements.forEach(function(toastElement) {
                var toast = new bootstrap.Toast(toastElement, {
                    autohide: true,
                    delay: toastElement.classList.contains('toast-success') ? 5000 : 7000
                });
                toast.show();
            });
        });
    </script>
    

    <!-- EchoAdmin JavaScript -->
    <script>
        let echoAdminIsOpen = false;
        let echoAdminIsLoading = false;
        let echoAdminHasGreeted = false;

        // Proactive greeting when admin panel loads
        function showEchoAdminGreeting() {
            if (!echoAdminHasGreeted) {
                echoAdminHasGreeted = true;
                // Show greeting after a short delay
                setTimeout(() => {
                    addEchoAdminMessage("Hi! How can I assist you today? I can help you with database queries, generate reports, and create charts. Try asking me about customers, bookings, cars, or invoices!", 'assistant');
                }, 2000);
            }
        }

        // Initialize greeting when page loads
        document.addEventListener('DOMContentLoaded', function() {
            showEchoAdminGreeting();
        });

        // Toggle chat window
        document.getElementById('echoAdminToggle').addEventListener('click', function() {
            const window = document.getElementById('echoAdminWindow');
            if (echoAdminIsOpen) {
                window.style.display = 'none';
                echoAdminIsOpen = false;
            } else {
                window.style.display = 'flex';
                echoAdminIsOpen = true;
                // Focus on input when opening
                setTimeout(() => {
                    document.getElementById('echoAdminInput').focus();
                }, 100);
            }
        });

        // Close chat window
        document.getElementById('echoAdminClose').addEventListener('click', function() {
            document.getElementById('echoAdminWindow').style.display = 'none';
            echoAdminIsOpen = false;
        });

        // Send message
        document.getElementById('echoAdminSend').addEventListener('click', sendEchoAdminMessage);
        document.getElementById('echoAdminInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !echoAdminIsLoading) {
                sendEchoAdminMessage();
            }
        });

        async function sendEchoAdminMessage() {
            const input = document.getElementById('echoAdminInput');
            const message = input.value.trim();
            
            if (!message || echoAdminIsLoading) return;
            
            echoAdminIsLoading = true;
            input.value = '';
            
            // Add user message
            addEchoAdminMessage(message, 'user');
            
            // Show loading
            showEchoAdminLoading();
            
            try {
                const response = await fetch('/AdminAssistant/ProcessQuery', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(message)
                });
                
                const result = await response.json();
                
                // Hide loading
                hideEchoAdminLoading();
                
                // Add assistant response
                addEchoAdminMessage(result.message, 'assistant', result);
                
            } catch (error) {
                hideEchoAdminLoading();
                addEchoAdminMessage('Sorry, I encountered an error. Please try again.', 'assistant');
                console.error('EchoAdmin Error:', error);
            } finally {
                echoAdminIsLoading = false;
            }
        }

        function addEchoAdminMessage(content, sender, response = null) {
            const messagesContainer = document.getElementById('echoAdminMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `echo-admin-message ${sender === 'user' ? 'user-message' : ''}`;
            
            let messageContent = `
                <div class="echo-admin-avatar">
                    <i class="bi bi-${sender === 'user' ? 'person' : 'robot'}"></i>
                </div>
                <div class="echo-admin-content">
                    <div class="echo-admin-text">${content}</div>
                </div>
            `;
            
            // If it's a download response, add download button
            if (response && response.responseType === 'download' && response.downloadUrl) {
                messageContent += `
                    <div class="echo-admin-content" style="margin-top: 8px;">
                        <a href="${response.downloadUrl}" class="echo-admin-download-btn" download="${response.fileName || 'report'}">
                            <i class="bi bi-download"></i> Download ${response.fileName || 'Report'}
                        </a>
                    </div>
                `;
            }
            
            // If it's a chart response, add chart download button
            if (response && response.responseType === 'chart' && response.downloadUrl) {
                messageContent += `
                    <div class="echo-admin-content" style="margin-top: 8px;">
                        <a href="${response.downloadUrl}" class="echo-admin-chart-btn" download="${response.fileName || 'chart'}">
                            <i class="bi bi-chart-bar"></i> Download Chart
                        </a>
                    </div>
                `;
            }
            
            messageDiv.innerHTML = messageContent;
            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function showEchoAdminLoading() {
            const messagesContainer = document.getElementById('echoAdminMessages');
            const loadingDiv = document.createElement('div');
            loadingDiv.id = 'echoAdminLoading';
            loadingDiv.className = 'echo-admin-message';
            loadingDiv.innerHTML = `
                <div class="echo-admin-avatar">
                    <i class="bi bi-robot"></i>
                </div>
                <div class="echo-admin-content">
                    <div class="echo-admin-loading">
                        <i class="bi bi-hourglass-split"></i>
                        <span>Thinking...</span>
                    </div>
                </div>
            `;
            messagesContainer.appendChild(loadingDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        function hideEchoAdminLoading() {
            const loadingDiv = document.getElementById('echoAdminLoading');
            if (loadingDiv) {
                loadingDiv.remove();
            }
        }
    </script>

    <!-- Route Simulation Modal for Admin -->
    <div class="modal fade" id="adminRouteSimulationModal" tabindex="-1" aria-labelledby="adminRouteSimulationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="adminRouteSimulationModalLabel">
                        <i class="bi bi-map me-2"></i>Route Simulation
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-12">
                            <div id="adminRouteMap" style="height: 500px; width: 100%;"></div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-body">
                                    <h6 class="card-title">
                                        <i class="bi bi-geo-alt-fill text-success me-2"></i>Pickup Location
                                    </h6>
                                    <p class="card-text" id="adminPickupLocation"></p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-body">
                                    <h6 class="card-title">
                                        <i class="bi bi-geo-alt-fill text-danger me-2"></i>Drop Location
                                    </h6>
                                    <p class="card-text" id="adminDropLocation"></p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12">
                            <div class="d-flex justify-content-center">
                                <button type="button" class="btn btn-primary" id="adminStartAnimation">
                                    <i class="bi bi-play-fill me-2"></i>Start Animation
                                </button>
                                <button type="button" class="btn btn-secondary ms-2" id="adminResetAnimation">
                                    <i class="bi bi-arrow-clockwise me-2"></i>Reset
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Admin Route Simulation Script -->
    <script>
        // Google Maps initialization callback
        function initGoogleMaps() {
            // This function is called when Google Maps API loads
            console.log('Google Maps API loaded successfully');
            
            // If there's a pending route simulation, initialize it now
            if (window.adminBookingCoordinates && document.getElementById('adminRouteSimulationModal').classList.contains('show')) {
                initializeAdminMap();
            }
        }

        // Admin route simulation variables
        let adminMap;
        let adminDirectionsService;
        let adminDirectionsRenderer;
        let adminCarMarker;
        let adminAnimationPath = [];
        let adminCurrentStep = 0;
        let adminAnimationInterval;
        let adminIsAnimating = false;

        // Custom car icon for admin
        const adminCarIcon = {
            url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
                <svg width="32" height="32" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
                    <path d="M8 12h16v8H8z" fill="#4285F4" stroke="#fff" stroke-width="2"/>
                    <circle cx="10" cy="22" r="3" fill="#333"/>
                    <circle cx="22" cy="22" r="3" fill="#333"/>
                    <path d="M6 12l2-6h16l2 6" fill="#EA4335"/>
                </svg>
            `),
            scaledSize: new google.maps.Size(32, 32),
            anchor: new google.maps.Point(16, 16)
        };

        // Function to open route simulation from admin booking details
        function openRouteSimulation(pickupLat, pickupLng, dropLat, dropLng, pickupLocation, dropLocation) {
            // Set location text
            document.getElementById('adminPickupLocation').textContent = pickupLocation;
            document.getElementById('adminDropLocation').textContent = dropLocation;
            
            // Store coordinates globally
            window.adminBookingCoordinates = {
                pickupLat: pickupLat,
                pickupLng: pickupLng,
                dropLat: dropLat,
                dropLng: dropLng
            };
            
            // Load Google Maps API if not already loaded
            if (typeof google === 'undefined') {
                loadGoogleMapsAPI();
            }
            
            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('adminRouteSimulationModal'));
            modal.show();
        }

        // Function to load Google Maps API dynamically
        function loadGoogleMapsAPI() {
            if (typeof google !== 'undefined') {
                return; // Already loaded
            }
            
            const apiKey = '@ViewBag.GoogleMapsApiKey';
            if (!apiKey || apiKey === '') {
                console.error('Google Maps API key not configured');
                alert('Google Maps API key not configured. Please contact administrator.');
                return;
            }
            
            const script = document.createElement('script');
            script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initGoogleMaps`;
            script.async = true;
            script.defer = true;
            document.head.appendChild(script);
        }

        // Initialize admin map when modal is shown
        document.addEventListener('DOMContentLoaded', function() {
            const adminRouteModal = document.getElementById('adminRouteSimulationModal');
            
            if (adminRouteModal) {
                adminRouteModal.addEventListener('shown.bs.modal', function() {
                    // Wait for Google Maps to be available
                    if (typeof google !== 'undefined') {
                        initializeAdminMap();
                    } else {
                        // Wait a bit and try again
                        setTimeout(function() {
                            if (typeof google !== 'undefined') {
                                initializeAdminMap();
                            } else {
                                console.error('Google Maps API failed to load');
                            }
                        }, 1000);
                    }
                });
                
                adminRouteModal.addEventListener('hidden.bs.modal', function() {
                    resetAdminAnimation();
                });
            }
            
            // Event listeners for admin animation controls
            const adminStartBtn = document.getElementById('adminStartAnimation');
            const adminResetBtn = document.getElementById('adminResetAnimation');
            
            if (adminStartBtn) {
                adminStartBtn.addEventListener('click', startAdminCarAnimation);
            }
            
            if (adminResetBtn) {
                adminResetBtn.addEventListener('click', resetAdminAnimation);
            }
        });

        function initializeAdminMap() {
            if (!window.adminBookingCoordinates) {
                console.error('Admin booking coordinates not found');
                return;
            }
            
            if (typeof google === 'undefined') {
                console.error('Google Maps API not loaded');
                return;
            }
            
            const { pickupLat, pickupLng, dropLat, dropLng } = window.adminBookingCoordinates;
            
            if (!pickupLat || !pickupLng || !dropLat || !dropLng) {
                console.error('Invalid admin coordinates');
                return;
            }
            
            // Initialize admin map
            const mapElement = document.getElementById('adminRouteMap');
            if (!mapElement) return;
            
            adminMap = new google.maps.Map(mapElement, {
                zoom: 12,
                center: { lat: pickupLat, lng: pickupLng },
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });
            
            // Initialize directions service and renderer
            adminDirectionsService = new google.maps.DirectionsService();
            adminDirectionsRenderer = new google.maps.DirectionsRenderer({
                draggable: false,
                suppressMarkers: true
            });
            
            adminDirectionsRenderer.setMap(adminMap);
            
            // Get directions and draw route
            getAdminDirections(pickupLat, pickupLng, dropLat, dropLng);
        }

        function getAdminDirections(pickupLat, pickupLng, dropLat, dropLng) {
            const request = {
                origin: { lat: pickupLat, lng: pickupLng },
                destination: { lat: dropLat, lng: dropLng },
                travelMode: google.maps.TravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.METRIC
            };
            
            adminDirectionsService.route(request, function(result, status) {
                if (status === 'OK') {
                    adminDirectionsRenderer.setDirections(result);
                    
                    // Extract path for animation
                    const route = result.routes[0];
                    const path = route.overview_path;
                    adminAnimationPath = path;
                    
                    // Add custom markers
                    addAdminCustomMarkers(pickupLat, pickupLng, dropLat, dropLng);
                    
                    // Add car marker at pickup location
                    addAdminCarMarker(pickupLat, pickupLng);
                    
                    // Fit map to show entire route
                    const bounds = new google.maps.LatLngBounds();
                    path.forEach(point => bounds.extend(point));
                    adminMap.fitBounds(bounds);
                    
                } else {
                    console.error('Admin directions request failed: ' + status);
                    // Fallback: show markers without route
                    addAdminCustomMarkers(pickupLat, pickupLng, dropLat, dropLng);
                    addAdminCarMarker(pickupLat, pickupLng);
                }
            });
        }

        function addAdminCustomMarkers(pickupLat, pickupLng, dropLat, dropLng) {
            // Pickup marker
            new google.maps.Marker({
                position: { lat: pickupLat, lng: pickupLng },
                map: adminMap,
                title: 'Pickup Location',
                icon: {
                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
                        <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="12" cy="12" r="10" fill="#34A853" stroke="#fff" stroke-width="2"/>
                            <path d="M12 6v6l4 2" stroke="#fff" stroke-width="2" fill="none"/>
                        </svg>
                    `),
                    scaledSize: new google.maps.Size(24, 24),
                    anchor: new google.maps.Point(12, 12)
                }
            });
            
            // Drop marker
            new google.maps.Marker({
                position: { lat: dropLat, lng: dropLng },
                map: adminMap,
                title: 'Drop Location',
                icon: {
                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
                        <svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="12" cy="12" r="10" fill="#EA4335" stroke="#fff" stroke-width="2"/>
                            <path d="M9 12l2 2 4-4" stroke="#fff" stroke-width="2" fill="none"/>
                        </svg>
                    `),
                    scaledSize: new google.maps.Size(24, 24),
                    anchor: new google.maps.Point(12, 12)
                }
            });
        }

        function addAdminCarMarker(lat, lng) {
            adminCarMarker = new google.maps.Marker({
                position: { lat: lat, lng: lng },
                map: adminMap,
                title: 'Car',
                icon: adminCarIcon
            });
        }

        function startAdminCarAnimation() {
            if (typeof google === 'undefined') {
                console.error('Google Maps API not loaded');
                return;
            }
            if (adminIsAnimating || adminAnimationPath.length === 0) return;
            
            adminIsAnimating = true;
            adminCurrentStep = 0;
            
            const startBtn = document.getElementById('adminStartAnimation');
            if (startBtn) {
                startBtn.disabled = true;
                startBtn.innerHTML = '<i class="bi bi-pause-fill me-2"></i>Animating...';
            }
            
            // Calculate animation duration (15 seconds total)
            const totalDuration = 15000; // 15 seconds
            const stepDuration = totalDuration / adminAnimationPath.length;
            
            adminAnimationInterval = setInterval(() => {
                if (adminCurrentStep < adminAnimationPath.length) {
                    const position = adminAnimationPath[adminCurrentStep];
                    adminCarMarker.setPosition(position);
                    adminCurrentStep++;
                } else {
                    // Animation complete
                    clearInterval(adminAnimationInterval);
                    adminIsAnimating = false;
                    
                    const startBtn = document.getElementById('adminStartAnimation');
                    if (startBtn) {
                        startBtn.disabled = false;
                        startBtn.innerHTML = '<i class="bi bi-play-fill me-2"></i>Start Animation';
                    }
                }
            }, stepDuration);
        }

        function resetAdminAnimation() {
            if (adminAnimationInterval) {
                clearInterval(adminAnimationInterval);
                adminAnimationInterval = null;
            }
            
            adminIsAnimating = false;
            adminCurrentStep = 0;
            
            const startBtn = document.getElementById('adminStartAnimation');
            if (startBtn) {
                startBtn.disabled = false;
                startBtn.innerHTML = '<i class="bi bi-play-fill me-2"></i>Start Animation';
            }
            
            // Reset car marker to pickup location (only if Google Maps is loaded)
            if (typeof google !== 'undefined' && adminCarMarker && window.adminBookingCoordinates) {
                const { pickupLat, pickupLng } = window.adminBookingCoordinates;
                adminCarMarker.setPosition({ lat: pickupLat, lng: pickupLng });
            }
        }
    </script>

    @await RenderSectionAsync("Scripts", required: false)
    @await RenderSectionAsync("Styles", required: false)
</body>
</html>
